// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sensor_controls.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllSensorControls = `-- name: GetAllSensorControls :many
SELECT sensor_type, mode, manual_until, manual_bool_value, manual_int_value FROM sensor_controls
`

type GetAllSensorControlsRow struct {
	SensorType      string
	Mode            string
	ManualUntil     pgtype.Timestamptz
	ManualBoolValue pgtype.Bool
	ManualIntValue  pgtype.Int4
}

func (q *Queries) GetAllSensorControls(ctx context.Context) ([]GetAllSensorControlsRow, error) {
	rows, err := q.db.Query(ctx, getAllSensorControls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSensorControlsRow
	for rows.Next() {
		var i GetAllSensorControlsRow
		if err := rows.Scan(
			&i.SensorType,
			&i.Mode,
			&i.ManualUntil,
			&i.ManualBoolValue,
			&i.ManualIntValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorControlByType = `-- name: GetSensorControlByType :one
SELECT sensor_type, mode, manual_until, manual_bool_value, manual_int_value FROM sensor_controls
WHERE sensor_type = $1
`

type GetSensorControlByTypeRow struct {
	SensorType      string
	Mode            string
	ManualUntil     pgtype.Timestamptz
	ManualBoolValue pgtype.Bool
	ManualIntValue  pgtype.Int4
}

func (q *Queries) GetSensorControlByType(ctx context.Context, sensorType string) (GetSensorControlByTypeRow, error) {
	row := q.db.QueryRow(ctx, getSensorControlByType, sensorType)
	var i GetSensorControlByTypeRow
	err := row.Scan(
		&i.SensorType,
		&i.Mode,
		&i.ManualUntil,
		&i.ManualBoolValue,
		&i.ManualIntValue,
	)
	return i, err
}

const insertSensorControl = `-- name: InsertSensorControl :one
INSERT INTO sensor_controls (sensor_type, mode, manual_until, manual_bool_value, manual_int_value)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (sensor_type) DO UPDATE
    SET mode = EXCLUDED.mode,
        manual_until = EXCLUDED.manual_until,
        manual_bool_value = EXCLUDED.manual_bool_value,
        manual_int_value = EXCLUDED.manual_int_value,
        updated_at = NOW()
RETURNING sensor_type, mode, manual_until, manual_bool_value, manual_int_value
`

type InsertSensorControlParams struct {
	SensorType      string
	Mode            string
	ManualUntil     pgtype.Timestamptz
	ManualBoolValue pgtype.Bool
	ManualIntValue  pgtype.Int4
}

type InsertSensorControlRow struct {
	SensorType      string
	Mode            string
	ManualUntil     pgtype.Timestamptz
	ManualBoolValue pgtype.Bool
	ManualIntValue  pgtype.Int4
}

func (q *Queries) InsertSensorControl(ctx context.Context, arg InsertSensorControlParams) (InsertSensorControlRow, error) {
	row := q.db.QueryRow(ctx, insertSensorControl,
		arg.SensorType,
		arg.Mode,
		arg.ManualUntil,
		arg.ManualBoolValue,
		arg.ManualIntValue,
	)
	var i InsertSensorControlRow
	err := row.Scan(
		&i.SensorType,
		&i.Mode,
		&i.ManualUntil,
		&i.ManualBoolValue,
		&i.ManualIntValue,
	)
	return i, err
}

const updateSensorControlMode = `-- name: UpdateSensorControlMode :one
UPDATE sensor_controls
SET mode = $2,
    manual_until = $3,
    manual_bool_value = $4,
    manual_int_value = $5,
    updated_at = NOW()
WHERE sensor_type = $1
RETURNING sensor_type, mode, manual_until, manual_bool_value, manual_int_value
`

type UpdateSensorControlModeParams struct {
	SensorType      string
	Mode            string
	ManualUntil     pgtype.Timestamptz
	ManualBoolValue pgtype.Bool
	ManualIntValue  pgtype.Int4
}

type UpdateSensorControlModeRow struct {
	SensorType      string
	Mode            string
	ManualUntil     pgtype.Timestamptz
	ManualBoolValue pgtype.Bool
	ManualIntValue  pgtype.Int4
}

func (q *Queries) UpdateSensorControlMode(ctx context.Context, arg UpdateSensorControlModeParams) (UpdateSensorControlModeRow, error) {
	row := q.db.QueryRow(ctx, updateSensorControlMode,
		arg.SensorType,
		arg.Mode,
		arg.ManualUntil,
		arg.ManualBoolValue,
		arg.ManualIntValue,
	)
	var i UpdateSensorControlModeRow
	err := row.Scan(
		&i.SensorType,
		&i.Mode,
		&i.ManualUntil,
		&i.ManualBoolValue,
		&i.ManualIntValue,
	)
	return i, err
}
