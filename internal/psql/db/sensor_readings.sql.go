// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sensor_readings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSensorReading = `-- name: CreateSensorReading :one
INSERT INTO sensor_readings (sensor_type, value)
VALUES ($1, $2)
RETURNING id, sensor_type, value, timestamp
`

type CreateSensorReadingParams struct {
	SensorType string
	Value      float64
}

func (q *Queries) CreateSensorReading(ctx context.Context, arg CreateSensorReadingParams) (SensorReading, error) {
	row := q.db.QueryRow(ctx, createSensorReading, arg.SensorType, arg.Value)
	var i SensorReading
	err := row.Scan(
		&i.ID,
		&i.SensorType,
		&i.Value,
		&i.Timestamp,
	)
	return i, err
}

const getSensorReading = `-- name: GetSensorReading :one
SELECT id, sensor_type, value, timestamp from sensor_readings
WHERE id = $1
`

func (q *Queries) GetSensorReading(ctx context.Context, id int64) (SensorReading, error) {
	row := q.db.QueryRow(ctx, getSensorReading, id)
	var i SensorReading
	err := row.Scan(
		&i.ID,
		&i.SensorType,
		&i.Value,
		&i.Timestamp,
	)
	return i, err
}

const getSensorReadings = `-- name: GetSensorReadings :many
SELECT id, sensor_type, value, timestamp from sensor_readings
`

func (q *Queries) GetSensorReadings(ctx context.Context) ([]SensorReading, error) {
	rows, err := q.db.Query(ctx, getSensorReadings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorReading
	for rows.Next() {
		var i SensorReading
		if err := rows.Scan(
			&i.ID,
			&i.SensorType,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorReadingsByTime = `-- name: GetSensorReadingsByTime :many
SELECT id, sensor_type, value, timestamp from sensor_readings
WHERE timestamp >= $1
  AND timestamp <= $2
ORDER BY timestamp DESC
LIMIT $3 OFFSET $4
`

type GetSensorReadingsByTimeParams struct {
	Timestamp   pgtype.Timestamptz
	Timestamp_2 pgtype.Timestamptz
	Limit       int32
	Offset      int32
}

func (q *Queries) GetSensorReadingsByTime(ctx context.Context, arg GetSensorReadingsByTimeParams) ([]SensorReading, error) {
	rows, err := q.db.Query(ctx, getSensorReadingsByTime,
		arg.Timestamp,
		arg.Timestamp_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorReading
	for rows.Next() {
		var i SensorReading
		if err := rows.Scan(
			&i.ID,
			&i.SensorType,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorReadingsByType = `-- name: GetSensorReadingsByType :many
SELECT id, sensor_type, value, timestamp from sensor_readings
WHERE sensor_type = $1
ORDER BY timestamp DESC
LIMIT $2 OFFSET $3
`

type GetSensorReadingsByTypeParams struct {
	SensorType string
	Limit      int32
	Offset     int32
}

func (q *Queries) GetSensorReadingsByType(ctx context.Context, arg GetSensorReadingsByTypeParams) ([]SensorReading, error) {
	rows, err := q.db.Query(ctx, getSensorReadingsByType, arg.SensorType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorReading
	for rows.Next() {
		var i SensorReading
		if err := rows.Scan(
			&i.ID,
			&i.SensorType,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorReadingsByTypeAndTime = `-- name: GetSensorReadingsByTypeAndTime :many
SELECT id, sensor_type, value, timestamp from sensor_readings
WHERE sensor_type = $1
  AND timestamp >= $2
  AND timestamp <= $3
ORDER BY timestamp DESC
LIMIT $4 OFFSET $5
`

type GetSensorReadingsByTypeAndTimeParams struct {
	SensorType  string
	Timestamp   pgtype.Timestamptz
	Timestamp_2 pgtype.Timestamptz
	Limit       int32
	Offset      int32
}

func (q *Queries) GetSensorReadingsByTypeAndTime(ctx context.Context, arg GetSensorReadingsByTypeAndTimeParams) ([]SensorReading, error) {
	rows, err := q.db.Query(ctx, getSensorReadingsByTypeAndTime,
		arg.SensorType,
		arg.Timestamp,
		arg.Timestamp_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorReading
	for rows.Next() {
		var i SensorReading
		if err := rows.Scan(
			&i.ID,
			&i.SensorType,
			&i.Value,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
